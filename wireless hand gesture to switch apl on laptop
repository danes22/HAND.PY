import cv2
import mediapipe as mp
import pyautogui
import os
import time


mp_hands = mp.solutions.hands
mp_drawing = mp.solutions.drawing_utils
hands = mp_hands.Hands(min_detection_confidence=0.7, min_tracking_confidence=0.7)


def scan_apps(folder):
    apps = []
    for root, dirs, files in os.walk(folder):
        for file in files:
            if file.endswith(".exe"):
                apps.append(os.path.join(root, file))
    return apps


apps_list = []
folders = [
    "C:\\Program Files",
    "C:\\Program Files (x86)",
    f"C:\\Users\\{os.getlogin()}\\AppData\\Local\\Programs"
]

for f in folders:
    if os.path.exists(f):
        apps_list += scan_apps(f)

apps_list.sort()
apps_list = apps_list[:100]  


keys = [
    ["Q","W","E","R","T","Y","U","I","O","P"],
    ["A","S","D","F","G","H","J","K","L"],
    ["Z","X","C","V","B","N","M","Space","Enter","Backspace"]
]

keyboard_buttons = {}
key_size = (60, 60)
start_x, start_y = 50, 400

for row_idx, row in enumerate(keys):
    for col_idx, key in enumerate(row):
        x1 = start_x + col_idx * (key_size[0] + 10)
        y1 = start_y + row_idx * (key_size[1] + 10)
        x2 = x1 + key_size[0]
        y2 = y1 + key_size[1]
        keyboard_buttons[key] = (x1, y1, x2, y2)


def is_over_button(x, y, box):
    x1, y1, x2, y2 = box
    return x1 < x < x2 and y1 < y < y2


cap = cv2.VideoCapture(0)
mode = "launcher"  
last_pressed = None
delay = 0.5
last_pressed_time = 0

launcher_button_size = (200, 60)
launcher_margin = 10
scroll_offset = 0
scroll_step = 100

while True:
    ret, frame = cap.read()
    frame = cv2.flip(frame, 1)
    h, w, _ = frame.shape

    rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    result = hands.process(rgb_frame)

    index_x, index_y, thumb_y = None, None, None

    if result.multi_hand_landmarks:
        for hand_landmarks in result.multi_hand_landmarks:
            mp_drawing.draw_landmarks(frame, hand_landmarks, mp_hands.HAND_CONNECTIONS)
            index_tip = hand_landmarks.landmark[mp_hands.HandLandmark.INDEX_FINGER_TIP]
            index_x, index_y = int(index_tip.x * w), int(index_tip.y * h)
            thumb_tip = hand_landmarks.landmark[mp_hands.HandLandmark.THUMB_TIP]
            thumb_y = int(thumb_tip.y * h)

    
    if mode == "launcher":
        y_start = 50 - scroll_offset
        for idx, app_path in enumerate(apps_list):
            x1 = 50
            y1 = y_start + idx * (launcher_button_size[1] + launcher_margin)
            x2 = x1 + launcher_button_size[0]
            y2 = y1 + launcher_button_size[1]
            box = (x1, y1, x2, y2)

            if index_x and index_y and is_over_button(index_x, index_y, box):
                cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), -1)
                cv2.putText(frame, "Opening...", (50, 40), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
                os.startfile(app_path)
                time.sleep(1)
            else:
                cv2.rectangle(frame, (x1, y1), (x2, y2), (255, 0, 0), 2)
            cv2.putText(frame, os.path.basename(app_path), (x1+5, y1+40),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255,0,0), 1)

        # Scroll with finger vs thumb
        if index_y and thumb_y:
            if index_y < thumb_y - 40:
                scroll_offset = max(0, scroll_offset - scroll_step)
            elif index_y > thumb_y + 40:
                scroll_offset += scroll_step

  
    else:
        for key, box in keyboard_buttons.items():
            if index_x and index_y and is_over_button(index_x, index_y, box):
                cv2.rectangle(frame, (box[0], box[1]), (box[2], box[3]), (0, 255, 0), -1)
                if last_pressed != key or (time.time() - last_pressed_time > delay):
                    if key == "Space":
                        pyautogui.press("space")
                    elif key == "Enter":
                        pyautogui.press("enter")
                    elif key == "Backspace":
                        pyautogui.press("backspace")
                    else:
                        pyautogui.press(key.lower())
                    last_pressed = key
                    last_pressed_time = time.time()
            else:
                cv2.rectangle(frame, (box[0], box[1]), (box[2], box[3]), (255, 0, 0), 2)
            cv2.putText(frame, key, (box[0]+5, box[1]+40),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 0, 0), 1)

  
    cv2.putText(frame, f"Mode: {mode} (Press 'm' to switch)", (10, 30),
                cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)

    cv2.imshow("Super Gesture Computer", frame)

    key = cv2.waitKey(1) & 0xFF
    if key == 27:  # ESC
        break
    elif key == ord("m"):
        mode = "keyboard" if mode == "launcher" else "launcher"

cap.release()
cv2.destroyAllWindows()
